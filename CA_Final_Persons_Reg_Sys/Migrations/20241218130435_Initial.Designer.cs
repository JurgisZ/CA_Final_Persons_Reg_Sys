// <auto-generated />
using CA_Final_Persons_Reg_Sys.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CA_Final_Persons_Reg_Sys.Migrations
{
    [DbContext(typeof(UsersDbContext))]
    [Migration("20241218130435_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CA_Final_Persons_Reg_Sys.Model.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("UserPersonalDataId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserPersonalDataId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            PasswordHash = new byte[] { 49, 68, 65, 52, 65, 50, 55, 50, 66, 67, 48, 48, 67, 57, 55, 67, 57, 67, 67, 65, 65, 70, 57, 65, 70, 68, 53, 48, 51, 49, 54, 50, 52, 55, 69, 54, 49, 51, 49, 54, 70, 48, 65, 70, 57, 53, 49, 69, 66, 65, 65, 69, 69, 65, 70, 65, 69, 66, 52, 52, 53, 53, 56, 70, 54, 68, 52, 57, 66, 57, 54, 53, 52, 54, 53, 65, 66, 66, 48, 51, 70, 67, 57, 69, 52, 53, 48, 67, 54, 69, 54, 57, 56, 66, 68, 55, 70, 54, 57, 49, 66, 50, 55, 69, 69, 50, 65, 56, 48, 48, 50, 55, 67, 68, 68, 56, 66, 54, 55, 52, 66, 53, 50, 69, 53, 67, 68, 52 },
                            PasswordSalt = new byte[] { 33, 79, 37, 67, 42, 101, 70, 75, 111, 87, 38, 107 },
                            Role = "User",
                            UserName = "jurginas",
                            UserPersonalDataId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            PasswordHash = new byte[] { 67, 55, 52, 66, 66, 51, 49, 70, 66, 56, 65, 65, 66, 49, 51, 52, 50, 56, 49, 52, 69, 69, 70, 69, 49, 55, 55, 55, 49, 48, 69, 65, 55, 51, 67, 48, 54, 49, 51, 49, 69, 52, 48, 57, 67, 56, 57, 57, 65, 65, 54, 69, 55, 57, 48, 55, 69, 65, 68, 65, 56, 55, 56, 56, 48, 53, 52, 68, 48, 65, 66, 52, 69, 69, 67, 55, 66, 52, 49, 49, 54, 69, 69, 56, 49, 56, 65, 52, 56, 49, 68, 66, 51, 48, 50, 54, 51, 67, 56, 67, 50, 57, 67, 67, 49, 48, 57, 66, 67, 56, 55, 49, 57, 51, 54, 67, 51, 52, 70, 50, 65, 50, 56, 49, 53, 54, 53, 56 },
                            PasswordSalt = new byte[] { 111, 69, 37, 103, 76, 109, 55, 101, 108, 80, 107, 75 },
                            Role = "User",
                            UserName = "antoska",
                            UserPersonalDataId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            PasswordHash = new byte[] { 70, 56, 66, 49, 65, 69, 54, 65, 56, 50, 49, 54, 53, 57, 68, 50, 57, 49, 53, 55, 53, 65, 56, 48, 48, 56, 70, 51, 68, 48, 50, 49, 53, 49, 55, 54, 65, 70, 57, 49, 49, 52, 55, 54, 54, 52, 54, 53, 52, 70, 66, 48, 53, 65, 68, 51, 65, 53, 69, 56, 65, 69, 56, 54, 53, 66, 51, 54, 48, 49, 66, 52, 49, 67, 50, 53, 68, 68, 66, 51, 50, 66, 52, 68, 55, 49, 69, 48, 50, 49, 50, 51, 48, 55, 50, 53, 65, 70, 66, 67, 66, 70, 65, 50, 54, 50, 70, 70, 67, 57, 65, 66, 48, 51, 52, 51, 52, 67, 49, 54, 67, 50, 65, 57, 50, 49, 66, 68 },
                            PasswordSalt = new byte[] { 65, 67, 88, 68, 102, 104, 86, 109, 100, 43, 65, 100 },
                            Role = "User",
                            UserName = "marmar",
                            UserPersonalDataId = 3L
                        });
                });

            modelBuilder.Entity("CA_Final_Persons_Reg_Sys.Model.UserPersonalData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ApartmentNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PersonalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("UserPersonalData", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ApartmentNumber = "1",
                            CityName = "Vilnius",
                            Email = "email@email.com",
                            HouseNumber = "1",
                            LastName = "Jurgeliauskas",
                            Name = "Jurgis",
                            PersonalCode = "38901011234",
                            PhoneNumber = "+37065123123",
                            ProfilePicture = "LocalPathURL",
                            StreetName = "Programavimo g."
                        },
                        new
                        {
                            Id = 2L,
                            ApartmentNumber = "2",
                            CityName = "Kaunas",
                            Email = "antanas@email.eu",
                            HouseNumber = "5",
                            LastName = "Antanauskas",
                            Name = "Antanas",
                            PersonalCode = "3702024321",
                            PhoneNumber = "0037065321222",
                            ProfilePicture = "LocalPathURL",
                            StreetName = "Laisves al."
                        },
                        new
                        {
                            Id = 3L,
                            ApartmentNumber = "200",
                            CityName = "London",
                            Email = "martyna@email.co.uk",
                            HouseNumber = "16",
                            LastName = "Paparte",
                            Name = "Martyna",
                            PersonalCode = "49103047474",
                            PhoneNumber = "004706532122211",
                            ProfilePicture = "LocalPathURL",
                            StreetName = "Leicester str."
                        });
                });

            modelBuilder.Entity("CA_Final_Persons_Reg_Sys.Model.User", b =>
                {
                    b.HasOne("CA_Final_Persons_Reg_Sys.Model.UserPersonalData", "UserPersonalData")
                        .WithOne()
                        .HasForeignKey("CA_Final_Persons_Reg_Sys.Model.User", "UserPersonalDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserPersonalData");
                });
#pragma warning restore 612, 618
        }
    }
}
